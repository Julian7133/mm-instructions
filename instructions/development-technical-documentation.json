{
  "id": "development-technical-documentation",
  "title": "Comprehensive Technical Documentation Creation",
  "description": "Create clear, maintainable technical documentation that serves both developers and stakeholders effectively",
  "category": "development",
  "difficulty": "intermediate",
  "timeEstimate": "35 minutes",
  "aiScore": 8,
  "tools": ["Claude-4-Sonnet", "ChatGPT-4", "Claude-4-Opus"],
  "languages": {
    "en": {
      "steps": [
        {
          "title": "Documentation Strategy and Information Architecture",
          "description": "Analyze technical system and design comprehensive documentation framework for different user types",
          "tool": "Claude-4-Sonnet",
          "toolReason": "Strong at systematic analysis of technical systems and organizing complex information into logical, accessible structures",
          "timeEstimate": "20 minutes",
          "prompt": "You are an experienced technical writer and software documentation specialist with expertise in information architecture, developer experience, and technical communication. Think step by step through this documentation challenge to create the most effective and usable documentation structure.\n\n<instructions>\nAnalyze the technical system and design comprehensive documentation strategy:\n\n1. **System Analysis**: Understand the technical architecture, components, and user workflows\n2. **Audience Segmentation**: Identify different user types and their documentation needs\n3. **Information Architecture**: Design logical organization and navigation structure\n4. **Content Strategy**: Plan content types, depth levels, and maintenance approach\n5. **Accessibility Design**: Ensure documentation serves users with different technical backgrounds\n6. **Maintenance Framework**: Establish processes for keeping documentation current and accurate\n\nTake time to think through user journeys and information needs systematically. If system complexity, user types, or documentation scope aren't clear, ask specific clarifying questions to ensure comprehensive coverage.\n</instructions>\n\n<technical_system>\nSystem type: [web application/API/library/framework/infrastructure]\nTechnology stack: [programming languages, frameworks, databases, tools]\nSystem complexity: [simple/moderate/complex architecture]\nUser base: [internal team/external developers/end users/mixed]\nDeployment model: [cloud/on-premise/hybrid/SaaS]\nIntegration points: [external APIs, services, systems it connects to]\n</technical_system>\n\n<documentation_context>\nCurrent documentation state: [none/minimal/outdated/comprehensive]\nPrimary documentation goals: [onboarding/troubleshooting/development/maintenance]\nAudience technical level: [beginner/intermediate/expert/mixed]\nMaintenance resources: [who will keep docs updated]\nDelivery format: [wiki/static site/embedded/PDF]\nUpdate frequency: [how often content changes]\n</documentation_context>\n\n<user_scenarios>\n**New Developer Onboarding**:\n[What new team members need to get productive]\n\n**Daily Development Tasks**:\n[Common development workflows and reference needs]\n\n**Troubleshooting and Debugging**:\n[How developers diagnose and fix problems]\n\n**Integration and Extension**:\n[How others build on or integrate with the system]\n\n**Maintenance and Operations**:\n[How system is deployed, monitored, and maintained]\n</user_scenarios>\n\n<thinking>\n[Your step-by-step analysis of the documentation requirements and optimal structure]\n</thinking>\n\n<audience_analysis>\n**Primary Audiences**:\n- **New Developers**: [What they need to get started quickly]\n- **Experienced Developers**: [Reference materials and advanced topics]\n- **System Administrators**: [Deployment, configuration, monitoring needs]\n- **Integration Partners**: [How to connect with and extend the system]\n- **Decision Makers**: [High-level architecture and business value]\n\n**User Journey Mapping**:\n- **Discovery**: [How users first encounter the system]\n- **Getting Started**: [Initial setup and first success]\n- **Daily Usage**: [Regular development and reference needs]\n- **Advanced Usage**: [Complex scenarios and customization]\n- **Troubleshooting**: [Problem diagnosis and resolution]\n</audience_analysis>\n\n<information_architecture>\n**Documentation Structure**:\n\n**1. Getting Started Section**\n- Quick start guide (5-minute setup)\n- Installation and setup\n- First project tutorial\n- Basic concepts overview\n\n**2. User Guides Section**\n- Step-by-step workflows\n- Common use cases\n- Best practices\n- Example implementations\n\n**3. Reference Documentation**\n- API documentation (if applicable)\n- Configuration options\n- Command reference\n- Error codes and messages\n\n**4. Architecture and Design**\n- System overview\n- Component architecture\n- Data models and schemas\n- Integration patterns\n\n**5. Operations and Maintenance**\n- Deployment guides\n- Monitoring and alerting\n- Backup and recovery\n- Troubleshooting guides\n\n**6. Contributing and Development**\n- Development environment setup\n- Coding standards and guidelines\n- Testing procedures\n- Release processes\n</information_architecture>\n\n<content_strategy>\n**Content Types and Priorities**:\n- **High Priority**: [Critical documentation that blocks productivity if missing]\n- **Medium Priority**: [Important documentation that improves efficiency]\n- **Low Priority**: [Nice-to-have documentation for edge cases]\n\n**Content Depth Levels**:\n- **Overview Level**: [High-level concepts and architecture]\n- **Procedural Level**: [Step-by-step instructions and workflows]\n- **Reference Level**: [Detailed specifications and parameters]\n- **Example Level**: [Code samples and real-world implementations]\n\n**Content Maintenance Plan**:\n- **Ownership**: [Who owns each section of documentation]\n- **Review Cycle**: [How often content is reviewed for accuracy]\n- **Update Triggers**: [When documentation must be updated]\n- **Feedback Integration**: [How user feedback improves documentation]\n</content_strategy>\n\n<accessibility_framework>\n**Technical Accessibility**:\n- **Beginner-Friendly**: [Clear explanations without assuming prior knowledge]\n- **Expert-Efficient**: [Quick reference and advanced details readily available]\n- **Progressive Disclosure**: [Basic → intermediate → advanced information layering]\n\n**Format Accessibility**:\n- **Searchable**: [Easy to find specific information]\n- **Scannable**: [Headers, lists, and formatting for quick reading]\n- **Mobile-Friendly**: [Readable on different devices and screen sizes]\n- **Offline Capable**: [Available when internet access is limited]\n</accessibility_framework>\n\n<success_metrics>\n**Documentation Effectiveness**:\n- **Time to First Success**: [How quickly new users achieve their first goal]\n- **Support Ticket Reduction**: [Fewer questions that documentation should answer]\n- **User Satisfaction**: [Feedback scores and usability ratings]\n- **Content Usage**: [Which sections are most/least used]\n- **Accuracy**: [How often documentation matches actual system behavior]\n</success_metrics>\n\n<clarifying_questions>\n[Specific questions about system complexity, user needs, or documentation requirements]\n</clarifying_questions>",
          "tips": [
            "Start with the most common user journeys and document those thoroughly first",
            "Use consistent formatting and structure across all documentation sections",
            "If system seems complex, ask the AI to help prioritize which documentation is most critical",
            "Include code examples and real-world scenarios wherever possible"
          ]
        },
        {
          "title": "Content Creation and Implementation",
          "description": "Write comprehensive technical documentation with clear examples, proper formatting, and maintainable structure",
          "tool": "Claude-4-Sonnet",
          "toolReason": "Excellent at technical writing, code documentation, and creating well-structured content with proper formatting and examples",
          "timeEstimate": "15 minutes",
          "prompt": "You are a senior technical writer and developer advocate with expertise in creating clear, comprehensive technical documentation that developers actually want to use. Focus on practical, actionable content with excellent examples.\n\n<instructions>\nCreate comprehensive technical documentation following the information architecture:\n\n1. **Clear Writing**: Use concise, jargon-free language with logical flow\n2. **Practical Examples**: Include working code samples and real-world scenarios\n3. **Proper Formatting**: Use consistent structure, headers, and visual hierarchy\n4. **Error Prevention**: Document common pitfalls and how to avoid them\n5. **Maintenance Considerations**: Write content that's easy to keep updated\n6. **User-Focused**: Address actual developer needs and workflows\n\nIf specific technical details, code examples, or implementation approaches need clarification, ask targeted questions to ensure accuracy and completeness.\n</instructions>\n\n<documentation_framework>\n[Paste the information architecture and content strategy from previous step]\n</documentation_framework>\n\n<technical_specifications>\nSystem components: [list main components and their purposes]\nKey APIs/interfaces: [important endpoints or interfaces to document]\nConfiguration options: [settings users need to understand]\nDependencies: [external systems, libraries, or services]\nError handling: [common errors and resolution approaches]\n</technical_specifications>\n\n<style_preferences>\nTone: [professional/friendly/casual]\nCode style: [language-specific formatting preferences]\nExample complexity: [simple/realistic/comprehensive]\nDocumentation format: [Markdown/reStructuredText/Wiki/other]\n</style_preferences>\n\nCreate the complete technical documentation:\n\n# [System/Project Name] Documentation\n\n## Quick Start Guide\n\n### Prerequisites\n- [System requirements]\n- [Required software/tools]\n- [Account or access requirements]\n\n### 5-Minute Setup\n```bash\n# Installation commands\n[Step-by-step setup with actual commands]\n```\n\n### Your First Success\n```[language]\n// Simple working example\n[Complete code that demonstrates basic functionality]\n```\n\nExpected output:\n```\n[What users should see when the example works]\n```\n\n---\n\n## Architecture Overview\n\n### System Components\n```\n[ASCII diagram or description of main components]\nComponent A → Component B → Component C\n     ↓              ↓              ↓\n Database      Cache        External API\n```\n\n### Key Concepts\n- **[Concept 1]**: [Clear definition with why it matters]\n- **[Concept 2]**: [Explanation with practical implications]\n- **[Concept 3]**: [How it fits into the overall system]\n\n### Data Flow\n1. [Step 1 of typical data flow]\n2. [Step 2 with decision points]\n3. [Step 3 and final outcomes]\n\n---\n\n## User Guides\n\n### Common Workflows\n\n#### Workflow 1: [Common Task Name]\n**When to use this**: [Scenario description]\n\n**Steps**:\n1. [Specific action with code example]\n   ```[language]\n   [Working code sample]\n   ```\n\n2. [Next step with expected outcome]\n   ```[language]\n   [Code continuation]\n   ```\n\n3. [Final step and verification]\n   ```[language]\n   [How to confirm success]\n   ```\n\n**Common Issues**:\n- **Problem**: [What might go wrong]\n  **Solution**: [How to fix it]\n\n#### Workflow 2: [Another Common Task]\n[Similar detailed structure]\n\n### Best Practices\n- **Performance**: [Optimization recommendations]\n- **Security**: [Security considerations and implementation]\n- **Maintenance**: [How to keep the system healthy]\n- **Testing**: [Recommended testing approaches]\n\n---\n\n## API Reference (if applicable)\n\n### Authentication\n```[language]\n// How to authenticate requests\n[Complete authentication example]\n```\n\n### Core Endpoints\n\n#### GET /[endpoint]\n**Description**: [What this endpoint does]\n\n**Parameters**:\n| Parameter | Type | Required | Description |\n|-----------|------|----------|-------------|\n| param1 | string | Yes | [Clear description] |\n| param2 | integer | No | [Default value and purpose] |\n\n**Request Example**:\n```[language]\n[Complete working request]\n```\n\n**Response Example**:\n```json\n{\n  \"status\": \"success\",\n  \"data\": {\n    // Realistic response data\n  }\n}\n```\n\n**Error Responses**:\n```json\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Invalid parameter: param1 cannot be empty\",\n    \"details\": \"Provide a non-empty string for param1\"\n  }\n}\n```\n\n---\n\n## Configuration\n\n### Configuration Files\n```[format]\n# config.yml example\n[Complete configuration with comments explaining each option]\n```\n\n### Environment Variables\n| Variable | Default | Description |\n|----------|---------|-------------|\n| VAR_NAME | default_value | [What this controls and when to change it] |\n\n### Advanced Configuration\n```[language]\n// Complex configuration scenarios\n[Examples for advanced use cases]\n```\n\n---\n\n## Troubleshooting\n\n### Common Problems\n\n#### Problem: [Specific Error or Issue]\n**Symptoms**: [How to recognize this problem]\n**Cause**: [Why this happens]\n**Solution**: \n1. [Specific diagnostic step]\n2. [Fix procedure with commands]\n3. [Verification step]\n\n**Prevention**: [How to avoid this in the future]\n\n#### Problem: [Another Common Issue]\n[Similar structure for additional problems]\n\n### Debugging Guide\n```bash\n# Enable debug logging\n[Commands to get more detailed information]\n\n# Check system status\n[Status and health check commands]\n\n# Log analysis\n[How to read and interpret logs]\n```\n\n### Getting Help\n- **Documentation**: [Link to additional resources]\n- **Community**: [Forums, chat, or support channels]\n- **Issues**: [How to report bugs or request features]\n- **Support**: [Commercial support options if available]\n\n---\n\n## Development\n\n### Development Environment Setup\n```bash\n# Clone and setup for development\n[Complete development setup instructions]\n```\n\n### Coding Standards\n- **Style Guide**: [Link to or summary of coding standards]\n- **Testing**: [How to run tests and write new ones]\n- **Documentation**: [How to document new features]\n\n### Contributing\n1. [How to contribute code or documentation]\n2. [Review process and requirements]\n3. [Release and deployment process]\n\n---\n\n## Deployment and Operations\n\n### Production Deployment\n```bash\n# Production deployment steps\n[Complete deployment procedure]\n```\n\n### Monitoring\n- **Health Checks**: [What to monitor for system health]\n- **Performance Metrics**: [Key performance indicators]\n- **Alerting**: [When and how to get notified of issues]\n\n### Backup and Recovery\n```bash\n# Backup procedures\n[How to backup data and configuration]\n\n# Recovery procedures\n[How to restore from backup]\n```\n\n---\n\n## Appendices\n\n### Frequently Asked Questions\n**Q: [Common question]**\nA: [Clear, complete answer with examples if needed]\n\n### Glossary\n- **[Term 1]**: [Definition in context of this system]\n- **[Term 2]**: [Clear explanation without jargon]\n\n### Change Log\n- **Version X.Y.Z**: [Recent changes and their impact]\n- **Version X.Y.0**: [Major changes and migration notes]\n\n### Additional Resources\n- [Links to related documentation]\n- [Tutorials and learning materials]\n- [Community resources and examples]",
          "tips": [
            "Write documentation that you would want to use when learning the system",
            "Test all code examples to ensure they actually work",
            "Use consistent formatting and naming conventions throughout",
            "Include \"why\" explanations, not just \"how\" instructions"
          ]
        }
      ]
    }
  }
}