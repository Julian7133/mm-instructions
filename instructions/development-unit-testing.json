{
  "id": "development-unit-testing",
  "title": "AI-Assisted Unit Testing and Test Case Generation",
  "description": "Create comprehensive unit tests with optimal coverage and maintainable test architecture",
  "category": "development",
  "difficulty": "intermediate",
  "timeEstimate": "20 minutes",
  "aiScore": 8,
  "tools": ["Claude-4-Sonnet", "ChatGPT-4"],
  "source": "Based on TDD practices from Martin Fowler's blog and testing best practices from Kent Beck",
  "languages": {
    "en": {
      "steps": [
        {
          "title": "Test Strategy and Implementation",
          "description": "Analyze code and generate comprehensive test suite",
          "tool": "Claude-4-Sonnet",
          "toolReason": "Superior code analysis and systematic testing approach",
          "timeEstimate": "20 minutes",
          "prompt": "You are a senior software engineer specializing in testing. Think step by step to create comprehensive tests.\n\nAnalyze this code and create tests:\n1. Identify all code paths and edge cases\n2. Design test data for normal and boundary conditions\n3. Plan mocking strategy for dependencies\n4. Write complete test implementation\n\nCode to test: [paste your function/class/module here]\n\nIf you need details about testing framework, language, or specific requirements, ask clarifying questions.\n\nProvide:\n**Test Strategy**: [what needs testing and why]\n**Test Cases**: [specific scenarios to cover]\n**Mock Strategy**: [what to mock and how]\n**Complete Test Code**: [working test implementation]\n**Coverage Analysis**: [expected coverage and critical paths]\n\nEnsure tests are:\n- Independent and repeatable\n- Fast execution\n- Clear failure messages",
          "tips": [
            "Test behavior, not implementation details",
            "Include both positive and negative test cases"
          ]
        }
      ]
    }
  }
}