{
  "id": "development-debugging-strategies",
  "title": "AI-Enhanced Debugging and Error Resolution",
  "description": "Systematically diagnose and resolve complex bugs using proven debugging methodologies",
  "category": "development",
  "difficulty": "advanced",
  "timeEstimate": "20 minutes",
  "aiScore": 9,
  "tools": ["Claude-4-Opus", "ChatGPT-4"],
  "source": "Based on debugging techniques from 'The Practice of Programming' and Google's debugging guide",
  "languages": {
    "en": {
      "steps": [
        {
          "title": "Systematic Bug Analysis and Resolution",
          "description": "Analyze problem and develop systematic debugging approach",
          "tool": "Claude-4-Opus",
          "toolReason": "Superior at complex problem analysis and systematic investigation",
          "timeEstimate": "20 minutes",
          "prompt": "You are a senior software engineer and debugging expert. Think step by step through this debugging challenge.\n\nAnalyze this bug systematically:\n1. Problem definition and hypothesis generation\n2. Investigation strategy and reproduction steps\n3. Root cause analysis\n4. Solution implementation and validation\n\nIssue: [describe the problem you're experiencing]\nError messages: [any logs, stack traces, or error output]\n\nIf you need more details about reproduction steps, environment, code, or recent changes, ask clarifying questions.\n\nProvide:\n**Root Cause Hypotheses**: [ranked by likelihood]\n**Investigation Plan**: [systematic debugging steps]\n**Diagnostic Commands**: [specific debugging tools/commands]\n**Solution**: [minimal fix that addresses root cause]\n**Prevention**: [how to avoid similar issues]\n**Testing**: [how to verify the fix works]",
          "tips": [
            "Start with the most recent changes to the system",
            "Use version control to identify when the problem started"
          ]
        }
      ]
    },
    "de": {
      "steps": [
        {
          "title": "Systematische Fehleranalyse und -behebung",
          "description": "Problem analysieren und systematischen Debugging-Ansatz entwickeln",
          "tool": "Claude-4-Opus",
          "toolReason": "Überlegen bei komplexer Problemanalyse und systematischer Untersuchung",
          "timeEstimate": "20 Minuten",
          "prompt": "Du bist ein leitender Software-Ingenieur und Debugging-Experte. Denke schrittweise durch diese Debugging-Herausforderung.\n\nAnalysiere diesen Fehler systematisch:\n1. Problemdefinition und Hypothesengenerierung\n2. Untersuchungsstrategie und Reproduktionsschritte\n3. Grundursachenanalyse\n4. Lösungsimplementierung und Validierung\n\nProblem: [beschreibe das Problem, das du erlebst]\nFehlermeldungen: [alle Logs, Stack-Traces oder Fehlerausgaben]\n\nWenn du mehr Details über Reproduktionsschritte, Umgebung, Code oder kürzliche Änderungen benötigst, stelle klärende Fragen.\n\nStelle bereit:\n**Grundursachen-Hypothesen**: [nach Wahrscheinlichkeit gerankt]\n**Untersuchungsplan**: [systematische Debugging-Schritte]\n**Diagnosebefehle**: [spezifische Debugging-Tools/Befehle]\n**Lösung**: [minimale Korrektur, die Grundursache behebt]\n**Prävention**: [wie ähnliche Probleme vermieden werden]\n**Testen**: [wie die Korrektur verifiziert wird]",
          "tips": [
            "Mit den neuesten Änderungen am System beginnen",
            "Versionskontrolle nutzen, um zu identifizieren, wann das Problem begann"
          ]
        }
      ]
    }
  }
}